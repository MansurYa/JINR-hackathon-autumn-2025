"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –∏–∑ –Ω–∞—É—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
"""

from openai import OpenAI, APIError, APIConnectionError, APITimeoutError, RateLimitError
from typing import List, Dict, Any
from tenacity import (
    retry,
    stop_after_attempt,
    wait_random_exponential,
    retry_if_exception_type
)


class OpenRouterError(Exception):
    """–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å OpenRouter API"""
    pass


class OpenRouterClient:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API"""

    def __init__(
        self,
        api_key: str,
        model_name: str,
        max_response_tokens: int = 4095,
        temperature: float = 0.0
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter.

        Args:
            api_key: API –∫–ª—é—á OpenRouter
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å '/' –¥–ª—è OpenRouter)
            max_response_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–≤—Å–µ–≥–¥–∞ 0.0 –¥–ª—è –Ω–∞—à–µ–π –∑–∞–¥–∞—á–∏)
        """
        if not api_key:
            raise ValueError("OpenRouter API key is required")

        if not model_name.count("/"):
            raise ValueError(
                f"–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è OpenRouter –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å '/'. "
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: 'anthropic/claude-3.5-sonnet'"
            )

        self.api_key = api_key
        self.model_name = model_name
        self.max_response_tokens = max_response_tokens
        self.temperature = temperature

    @retry(
        wait=wait_random_exponential(min=1, max=60),
        stop=stop_after_attempt(10),
        retry=retry_if_exception_type((
            APIError,
            APIConnectionError,
            APITimeoutError,
            RateLimitError,
            OpenRouterError
        )),
        reraise=True
    )
    def call_api(self, system_prompt: str, user_message: str) -> str:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç OpenRouter API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—É—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏.

        Args:
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        """
        print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter API ({self.model_name})...")

        client = None
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
            client = OpenAI(
                base_url="https://openrouter.ai/api/v1",
                api_key=self.api_key,
                max_retries=0
            )

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ]

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
            request_parameters = {
                "model": self.model_name,
                "messages": messages,
                "max_tokens": self.max_response_tokens,
                "temperature": self.temperature,
                "extra_headers": {
                    "HTTP-Referer": "https://jinr-hackathon.com",
                    "X-Title": "JINR Patent Landscape Analyzer"
                },
                "extra_body": {
                    "provider": {
                        "sort": "throughput"
                    }
                }
            }

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            api_response = client.chat.completions.create(**request_parameters)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            if not api_response or not hasattr(api_response, 'choices') or not api_response.choices:
                raise OpenRouterError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç choices)")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            content = api_response.choices[0].message.content

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º
            if content is None or (isinstance(content, str) and content.strip() == ""):
                provider = getattr(api_response, 'provider', 'unknown')
                usage_info = ""
                if hasattr(api_response, 'usage'):
                    usage_info = f", tokens: {api_response.usage.completion_tokens}/{api_response.usage.prompt_tokens}"

                error_msg = f"–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}{usage_info}"
                print(f"‚ö†Ô∏è {error_msg}")
                raise OpenRouterError(error_msg)

            print("‚úì –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return content

        except (APIError, APIConnectionError, APITimeoutError, RateLimitError) as api_error:
            error_details = []
            if hasattr(api_error, 'message'):
                error_details.append(f"—Å–æ–æ–±—â–µ–Ω–∏–µ: {api_error.message}")
            if hasattr(api_error, 'status_code'):
                error_details.append(f"HTTP —Å—Ç–∞—Ç—É—Å: {api_error.status_code}")
            if hasattr(api_error, 'code'):
                error_details.append(f"–∫–æ–¥ –æ—à–∏–±–∫–∏: {api_error.code}")

            error_info = ', '.join(error_details) if error_details else '–¥–µ—Ç–∞–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
            error_message = f"[–û—à–∏–±–∫–∞ API] {type(api_error).__name__}: {error_info}"
            print(f"‚ùå {error_message}")
            raise

        except OpenRouterError:
            raise

        except Exception as general_error:
            print(f"üî• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(general_error)}")
            raise

        finally:
            if client is not None:
                try:
                    client.close()
                except Exception:
                    pass
